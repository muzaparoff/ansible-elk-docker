- name: Ensure docke volume mapping host directories exist
  file:
    state: directory
    path: "{{ item | regex_replace('^(?P<host>.+):(?P<container>.+):(?P<mode>.+)', '\\g<host>') }}"
  with_items:
    - "{{ docker_kibana_directory_volumes }}"
  tags:
    - install
    - upgrade


- name: Ensure docker volume mapping host file directories exist
  file:
    state: directory
    path: "{{ item | regex_replace('^(?P<host>.+):(?P<container>.+):(?P<mode>.+)', '\\g<host>') | dirname }}"
  with_items:
    - "{{ docker_kibana_file_volumes }}"
  tags:
    - install
    - upgrade

- name: Copy docker volume mapping host file
  template:
    src="{{ docker_kibana_template_path }}{{ item | regex_replace('^(?P<host>.+):(?P<container>.+):(?P<mode>.+)', '\\g<host>') | basename }}.j2"
    dest="{{ item | regex_replace('^(?P<host>.+):(?P<container>.+):(?P<mode>.+)', '\\g<host>') }}"
    mode='0644'
  with_items:
    - "{{ docker_kibana_file_volumes }}"
  tags:
    - install
    - upgrade


- name: Remove existing {{ docker_kibana_name }} container
  docker:
    docker_api_version: "{{ docker_api_version }}"
    image: "{{ docker_kibana_image }}"
    name: "{{ docker_kibana_name }}"
    state: absent
  tags:
    - install
    - upgrade


- name: Run docker kibana container
  become: true
  docker:
    docker_api_version: "{{ docker_api_version }}"
    env: "{{ docker_kibana_env }}"
    expose: "{{ docker_kibana_expose }}"
    image: "{{ docker_kibana_image }}"
    name: "{{ docker_kibana_name }}"
    ports: "{{ docker_kibana_ports }}"
    links: "{{ docker_kibana_links }}"
    volumes: "{{ docker_kibana_volumes }}"
    command: "{{ docker_kibana_command }}"
    memory_limit: "{{ docker_kibana_memory_limit }}"
    log_driver: "{{ docker_kibana_log_driver }}"
    log_opt: "{{ docker_kibana_log_opt }}"
    pull: always
    restart_policy: always
    state: reloaded
  tags:
    - install
    - upgrade
